type Query {
  "Get a list of all users registered in database"
  getAllUsers: [User!]!
  getSingleUser(idUser: Float!): User!
  getAllRecipes: [Recipe!]!
  getOneRecipe(idRecipe: Float!): Recipe!
  getMyRecipe(nameRecipe: String!): [Recipe!]!
  getAllCategories: [Category!]!
  getOneCategory(idCategory: Float!): Category!
}

"This is a type that should probably be undocumented"
type User {
  "ID unique and autogenerated by system"
  idUser: ID!
  nameUser: String!
  emailUser: String!
  passwordUser: String!
  rol: String!
  recipes: [Recipe!]!
}

type Recipe {
  idRecipe: ID!
  nameRecipe: String!
  descriptionRecipe: String!
  ingredientsRecipe: String!
  user: User!
  category: Category!
}

type Category {
  idCategory: ID
  nameCategory: String
  recipes: [Recipe!]!
  errors: AppError
}

type AppError {
  field: String
  message: String
}

type Mutation {
  "Can generate token for login user"
  generateToken(passwordUser: String!, emailUser: String!): AuthToken!
  createRecipe(recipeInput: CreateRecipeInput!): Recipe!
  updateRecipe(nameRecipe: CreateRecipeInput!, idRecipe: Float!): Recipe!
  deleteRecipe(idRecipe: Float!): Boolean!
  createCategory(nameCategory: CreateCategoryInput): Category!
  updateCategory(
    nameCategory: CreateCategoryInput!
    idCategory: Float!
  ): Category!
  deleteCategory(idCategory: Float!): Boolean!
}

type AuthToken {
  token: String
  refreshToken: String
  errors: AppError
}

"`Markdown` and reference interpolation like [`[String!]!`]({{Types.String}}) are supported"
input CreateRecipeInput {
  nameRecipe: String!
  descriptionRecipe: String!
  ingredientsRecipe: String!
  userIdUser: Float!
  categoryIdCategory: Float!
}

"Type for defining and validating Category creation input data"
input CreateCategoryInput {
  nameCategory: String!
}
